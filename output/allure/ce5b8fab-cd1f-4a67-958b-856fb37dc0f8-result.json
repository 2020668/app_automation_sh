{"name": "test_screen_order[data0]", "status": "broken", "statusDetails": {"message": "ValueError: invalid literal for int() with base 10: ''", "trace": "self = <test_cases.test_orderbook.TestOrderBook object at 0x0000000004DD35C0>\ndata = {'login_phone': '18971335925', 'login_pwd': '335925', 'main_store_name': '吉野家日式料理店', 'status': '全部订单', ...}\nrun_app = <appium.webdriver.webdriver.WebDriver (session=\"fe89951c-edef-42c7-9a9c-24a6f3689335\")>\n\n    @pytest.mark.screen\n    @pytest.mark.parametrize(\"data\", od.screen_data)\n    def test_screen_order(self, data, run_app):\n        # 执行登录\n        LoginPage(run_app).login_action(data[\"login_phone\"], data[\"login_pwd\"])\n    \n        screen_result = OrderBookPage(run_app).screen_order(login_phone=data[\"login_phone\"],\n                                                            login_pwd=data[\"login_pwd\"],\n                                                            main_store_name=data[\"main_store_name\"],\n                                                            store_name=data[\"store_name\"],\n                                                            store_id=data[\"store_id\"],\n                                                            time_desc=data[\"time_desc\"],\n                                                            time_start=data[\"time_start\"],\n                                                            time_end=data[\"time_end\"],\n                                                            terminal_type=data[\"terminal_type\"],\n                                                            terminal_name=data[\"terminal_name\"],\n                                                            terminal_id=data[\"terminal_id\"],\n                                                            type_source=data[\"type_source\"],\n>                                                           status=data[\"status\"]\n                                                            )\n\ntest_cases\\test_orderbook.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_ojbects\\orderbook_page.py:522: in screen_order\n    self.select_datetime(datetime=time_start)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page_ojbects.orderbook_page.OrderBookPage object at 0x0000000004DF3B00>\ndatetime = '2019-12-15 11:30'\n\n    def select_datetime(self, datetime):\n    \n        time.sleep(1)\n    \n        year = datetime[:4]\n        month = datetime[5:7]\n        day = datetime[8:10]\n        hour = datetime[11:13]\n        minute = datetime[14:16]\n        logging.info(\"滑动输入的时间为-->{}{}{}{}{}\".format(year, month, day, hour, minute))\n    \n        # 处理year  先截图获取文本 判断 是否滑动\n        while True:\n    \n            # 对开始时间的年份进行截图\n            self.save_img_by_custom_size(start_x=0.02, start_y=0.895, end_x=0.155, end_y=0.92, img_desc=\"时间的年份\")\n    \n            time.sleep(2)\n    \n            # 获取截图的文本\n            api = BaiduAIP()\n            text = api.picture_text(os.path.join(CUSTOM_SIZE_IMG_DIR, \"时间的年份.png\"))\n            logging.info(\"当前年份是-->{}, 继续滑动...\".format(text) if text != year else \"年份-->{} 滑动选中OK\".format(text))\n    \n            if text == year:\n                break\n            # 判断然后滑动一个单位\n            elif text < year:\n                self.swipe_diy(start_width=0.1, start_height=0.9, end_width=0.1, end_height=0.87)\n            else:\n                self.swipe_diy(start_width=0.1, start_height=0.87, end_width=0.1, end_height=0.9)\n    \n        # 处理month\n        while True:\n    \n            self.save_img_by_custom_size(start_x=0.27, start_y=0.895, end_x=0.335, end_y=0.92, img_desc=\"时间的月份\")\n    \n            time.sleep(2)\n    \n            api = BaiduAIP()\n            text = api.picture_text(os.path.join(CUSTOM_SIZE_IMG_DIR, \"时间的月份.png\"))\n            logging.info(\"当前的月份是-->{}, 继续滑动...\".format(text) if text != month else \"月份-->{} 滑动选中OK\".format(text))\n    \n            if text == month:\n                break\n            elif text < month:\n                self.swipe_diy(start_width=0.3, start_height=0.9, end_width=0.3, end_height=0.87)\n            else:\n                self.swipe_diy(start_width=0.3, start_height=0.87, end_width=0.3, end_height=0.9)\n    \n        # 处理day\n        while True:\n    \n            # 单独识别数字存在成功率低的问题 故加上单位截图 然后只取数字部分的文本\n            self.save_img_by_custom_size(start_x=0.46, start_y=0.895, end_x=0.528, end_y=0.92, img_desc=\"时间的日期\")\n    \n            time.sleep(2)\n    \n            api = BaiduAIP()\n            text = api.picture_text(os.path.join(CUSTOM_SIZE_IMG_DIR, \"时间的日期.png\"))\n            logging.info(\"当前的日期是-->{}, 继续滑动...\".format(text) if text != day else \"日期-->{} 滑动选中OK\".format(text))\n    \n            if text == day:\n                break\n    \n            elif text < day:\n                delta = int(day) - int(text)\n                i = 0\n                while i < delta:\n                    self.swipe_diy(start_width=0.49, start_height=0.9, end_width=0.49, end_height=0.87)\n                    i += 1\n            else:\n                delta = int(text) - int(day)\n                i = 0\n                while i < delta:\n                    self.swipe_diy(start_width=0.49, start_height=0.87, end_width=0.49, end_height=0.9)\n                    i += 1\n    \n        # 处理hour\n        while True:\n    \n            self.save_img_by_custom_size(start_x=0.652, start_y=0.895, end_x=0.716, end_y=0.92, img_desc=\"时间的小时\")\n    \n            time.sleep(2)\n    \n            api = BaiduAIP()\n            text = api.picture_text(os.path.join(CUSTOM_SIZE_IMG_DIR, \"时间的小时.png\"))\n            logging.info(\"当前的小时是-->{}, 继续滑动...\".format(text) if text != hour else \"小时-->{} 滑动选中OK\".format(text))\n    \n            if text == hour:\n                break\n            elif text < hour:\n>               delta = int(hour) - int(text)\nE               ValueError: invalid literal for int() with base 10: ''\n\npage_ojbects\\orderbook_page.py:875: ValueError"}, "attachments": [{"name": "log", "source": "b3bee1ca-c2d4-440a-9936-d44a9a813185-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'login_phone': '18971335925', 'login_pwd': '335925', 'main_store_name': '吉野家日式料理店', 'store_name': '吉野家日式料理店', 'store_id': '2019121716261782222', 'time_desc': None, 'time_start': '2019-12-15 11:30', 'time_end': '2020-01-07 13:11', 'terminal_type': '指定终端', 'terminal_name': '收款一号机', 'terminal_id': 'qr_pay:NO_2018122515457307981444', 'type_source': '其他', 'status': '全部订单'}"}], "start": 1578378330659, "stop": 1578378490393, "uuid": "0907b05d-f242-4873-b474-c5d7bb146a28", "historyId": "bac4a5fc2ea306cc5c69292ec7940198", "testCaseId": "3d777f4d2a951069fe1277598e603313", "fullName": "test_cases.test_orderbook.TestOrderBook#test_screen_order", "labels": [{"name": "tag", "value": "order"}, {"name": "tag", "value": "smoke"}, {"name": "tag", "value": "screen"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_orderbook"}, {"name": "subSuite", "value": "TestOrderBook"}, {"name": "host", "value": "AB-201906291255"}, {"name": "thread", "value": "11108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_orderbook"}]}