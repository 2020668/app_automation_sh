{"name": "test_screen_order[data0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_cases.test_orderbook.TestOrderBook object at 0x0000000004EA19B0>\ndata = {'login_phone': '18971335925', 'login_pwd': '335925', 'main_store_name': '吉野家日式料理店', 'status': 'all', ...}\nrun_app = <appium.webdriver.webdriver.WebDriver (session=\"24eb3823-756c-41f3-bf0c-04dfe0953b47\")>\n\n    @pytest.mark.screen\n    @pytest.mark.parametrize(\"data\", od.screen_data)\n    def test_screen_order(self, data, run_app):\n        # 执行登录\n        LoginPage(run_app).login_action(data[\"login_phone\"], data[\"login_pwd\"])\n    \n        screen_result = OrderBookPage(run_app).screen_order(login_phone=data[\"login_phone\"],\n                                                            login_pwd=data[\"login_pwd\"],\n                                                            main_store_name=data[\"main_store_name\"],\n                                                            store_name=data[\"store_name\"],\n                                                            store_id=data[\"store_id\"],\n                                                            time_desc=data[\"time_desc\"],\n                                                            time_start=data[\"time_start\"],\n                                                            time_end=data[\"time_end\"],\n                                                            terminal_name=data[\"terminal_name\"],\n                                                            terminal_id=data[\"terminal_id\"],\n                                                            type_source=data[\"type_source\"],\n>                                                           status=data[\"status\"]\n                                                            )\n\ntest_cases\\test_orderbook.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page_ojbects.orderbook_page.OrderBookPage object at 0x0000000004EC5B00>\nlogin_phone = '18971335925', login_pwd = '335925', main_store_name = '吉野家日式料理店'\nstore_name = '吉野家日式料理店', store_id = '2019122413571152189', time_desc = None\ntime_start = None, time_end = None, terminal_name = None, terminal_id = None\ntype_source = 'all', status = 'all'\n\n        def screen_order(self, login_phone, login_pwd, main_store_name, store_name, store_id, time_desc,\n                         time_start, time_end, terminal_name, terminal_id, type_source, status):\n    \n            store_name_loc = MobileBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text(\"{}\")'.format(store_name)\n    \n            self.wait_ele_visible(loc=Loc.order_nav_loc, img_desc=\"账单按钮\")\n            self.click_element(loc=Loc.order_nav_loc, img_desc=\"账单按钮\")\n    \n            self.wait_ele_visible(loc=Loc.screen_loc, img_desc=\"筛选按钮\")\n            self.click_element(loc=Loc.screen_loc, img_desc=\"筛选按钮\")\n    \n    # ================================= C H O I C E     T I M E =================================\n    \n            # 快速选择时间区域 本月 近7天 近24小时\n            if time_desc:\n                time_desc_loc = MobileBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text(\"{}\")'.format(time_desc)\n                self.wait_ele_visible(loc=time_desc_loc, img_desc=\"时间描述-->{}\".format(time_desc))\n                self.click_element(loc=time_desc_loc, img_desc=\"时间描述-->{}\".format(time_desc))\n    \n            # 自定义开始时间和结束时间\n            if time_start:\n                self.wait_ele_visible(loc=Loc.start_time_loc, img_desc=\"开始时间\")\n                self.click_element(loc=Loc.start_time_loc, img_desc=\"开始时间\")\n    \n                # self.swipe_diy(start_width=0.1, start_height=0.8, end_width=0.1, end_height=0.85)\n                # time.sleep(1)\n    \n                self.swipe_diy(start_width=0.4, start_height=0.8, end_width=0.4, end_height=0.85)\n                time.sleep(1)\n    \n                self.swipe_diy(start_width=0.50, start_height=0.8, end_width=0.5, end_height=0.9)\n                time.sleep(1)\n    \n                self.swipe_diy(start_width=0.70, start_height=0.8, end_width=0.70, end_height=0.9)\n                time.sleep(1)\n    \n                self.swipe_diy(start_width=0.90, start_height=0.8, end_width=0.90, end_height=0.9)\n                time.sleep(1)\n    \n                self.wait_ele_visible(loc=Loc.time_confirm_loc, img_desc=\"选择时间确定按钮\")\n                self.click_element(loc=Loc.time_confirm_loc, img_desc=\"选择时间确定按钮\")\n    \n            if time_end:\n                self.wait_ele_visible(loc=Loc.end_time_loc, img_desc=\"结束时间\")\n                self.click_element(loc=Loc.end_time_loc, img_desc=\"结束时间\")\n    \n                # self.swipe_diy(start_width=0.1, start_height=0.8, end_width=0.1, end_height=0.85)\n                # time.sleep(1)\n    \n                self.swipe_diy(start_width=0.4, start_height=0.8, end_width=0.4, end_height=0.85)\n                time.sleep(1)\n    \n                self.swipe_diy(start_width=0.50, start_height=0.8, end_width=0.5, end_height=0.9)\n                time.sleep(1)\n    \n                self.swipe_diy(start_width=0.70, start_height=0.8, end_width=0.70, end_height=0.9)\n                time.sleep(1)\n    \n                self.swipe_diy(start_width=0.90, start_height=0.8, end_width=0.90, end_height=0.9)\n                time.sleep(1)\n    \n                self.wait_ele_visible(loc=Loc.time_confirm_loc, img_desc=\"选择时间确定按钮\")\n                self.click_element(loc=Loc.time_confirm_loc, img_desc=\"选择时间确定按钮\")\n    \n            # 获取滑动选择的开始时间和结束时间 包括选择的固定时间后自动写入的时间\n            self.wait_ele_visible(loc=Loc.start_time_loc, img_desc=\"开始时间\")\n            api_time_start = self.get_text(loc=Loc.start_time_loc, img_desc=\"开始时间\")\n    \n            self.wait_ele_visible(loc=Loc.end_time_loc, img_desc=\"结束时间\")\n            api_time_end = self.get_text(loc=Loc.end_time_loc, img_desc=\"结束时间\")\n    \n    \n    # ================================= C H O I C E     S T O R E =================================\n    \n            if store_name:\n    \n                # 选择门店\n                self.wait_ele_visible(loc=Loc.store_choose_loc, img_desc=\"选择门店按钮\")\n                self.click_element(loc=Loc.store_choose_loc, img_desc=\"选择门店按钮\")\n    \n                self.wait_ele_visible(loc=Loc.all_store_name_loc, img_desc=\"所有门店按钮\")\n                self.click_element(loc=Loc.all_store_name_loc, img_desc=\"所有门店按钮\")\n    \n                self.wait_ele_visible(loc=store_name_loc, img_desc=\"门店->{}\".format(store_name))\n                self.click_element(loc=store_name_loc, img_desc=\"门店->{}\".format(store_name))\n    \n                self.wait_ele_visible(loc=Loc.store_confirm_loc, img_desc=\"选择门店后的确定按钮\")\n                self.click_element(loc=Loc.store_confirm_loc, img_desc=\"选择门店后的确定按钮\")\n            else:\n                pass\n    \n            if terminal_name:\n    \n                self.wait_ele_visible(loc=Loc.terminal_loc, img_desc=\"全部终端 按钮\")\n                self.click_element(loc=Loc.terminal_loc, img_desc=\"全部终端 按钮\")\n    \n                self.wait_ele_visible(loc=Loc.terminal_name_loc, img_desc=\"终端名称\")\n                self.get_element(loc=Loc.terminal_name_loc, img_desc=\"终端名称\", find_all=True)[terminal_name].click()\n    \n                self.wait_ele_visible(loc=Loc.terminal_confirm_loc, img_desc=\"选择终端后的确定按钮\")\n                self.click_element(loc=Loc.terminal_confirm_loc, img_desc=\"选择终端后的确定按钮\")\n            else:\n                pass\n    \n            if type_source == \"all\":\n                self.wait_ele_visible(loc=Loc.payment_method_all_loc, img_desc=\"支付方式 全部 按钮\")\n                self.click_element(loc=Loc.payment_method_all_loc, img_desc=\"支付方式 全部 按钮\")\n            elif type_source == \"weixin\":\n                self.wait_ele_visible(loc=Loc.payment_method_wechat_loc, img_desc=\"支付方式 微信 按钮\")\n                self.click_element(loc=Loc.payment_method_wechat_loc, img_desc=\"支付方式 微信 按钮\")\n            elif type_source == \"alipay\":\n                self.wait_ele_visible(loc=Loc.payment_method_alipay_loc, img_desc=\"支付方式 支付宝 按钮\")\n                self.click_element(loc=Loc.payment_method_alipay_loc, img_desc=\"支付方式 支付宝 按钮\")\n            elif type_source == \"pos\":\n                self.wait_ele_visible(loc=Loc.payment_method_pos_loc, img_desc=\"支付方式 刷卡 按钮\")\n                self.click_element(loc=Loc.payment_method_pos_loc, img_desc=\"支付方式 刷卡 按钮\")\n            elif type_source == \"auth\":\n                self.wait_ele_visible(loc=Loc.payment_method_auth_loc, img_desc=\"支付方式 预授权 按钮\")\n                self.click_element(loc=Loc.payment_method_auth_loc, img_desc=\"支付方式 预授权 按钮\")\n            elif type_source == \"other\":\n                self.wait_ele_visible(loc=Loc.payment_method_other_loc, img_desc=\"支付方式 其他 按钮\")\n                self.click_element(loc=Loc.payment_method_other_loc, img_desc=\"支付方式 其他 按钮\")\n            else:\n                pass\n    \n            if status == \"all\":\n                self.wait_ele_visible(loc=Loc.status_all_loc, img_desc=\"支付状态 全部订单 按钮\")\n                self.click_element(loc=Loc.status_all_loc, img_desc=\"支付状态 全部订单 按钮\")\n            elif status == \"success\":\n                self.wait_ele_visible(loc=Loc.status_success_loc, img_desc=\"支付状态 收款成功 按钮\")\n                self.click_element(loc=Loc.status_success_loc, img_desc=\"支付状态 收款成功 按钮\")\n            elif status == \"refund\":\n                self.wait_ele_visible(loc=Loc.status_refund_loc, img_desc=\"支付状态 已退款 按钮\")\n                self.click_element(loc=Loc.status_refund_loc, img_desc=\"支付状态 已退款 按钮\")\n    \n            self.wait_ele_visible(loc=Loc.confirm_loc, img_desc=\"筛选界面的确定按钮\")\n            self.click_element(loc=Loc.confirm_loc, img_desc=\"筛选界面的确定按钮\")\n    \n            time.sleep(2)\n    \n            self.wait_ele_visible(loc=Loc.screen_result_start_end_time, img_desc=\"筛选结果中的起始时间\")\n            screen_result_start_end_time = self.get_text(loc=Loc.screen_result_start_end_time, img_desc=\"筛选结果中的起始时间\")\n            screen_result_start_time = screen_result_start_end_time[:16]\n            logging.info(\"筛选结果中的开始时间为-->{}\".format(screen_result_start_time))\n            screen_result_end_time = screen_result_start_end_time[19:35]\n            logging.info(\"筛选结果中的结束时间为-->{}\".format(screen_result_end_time))\n    \n            self.wait_ele_visible(loc=Loc.screen_result_store_name_loc, img_desc=\"筛选结果中的门店名称\")\n            screen_result_store_name = self.get_text(loc=Loc.screen_result_store_name_loc, img_desc=\"筛选结果中的门店名称\")\n    \n            self.wait_ele_visible(loc=Loc.screen_result_payment_loc, img_desc=\"筛选结果中的支付方式\")\n            screen_result_payment = self.get_text(loc=Loc.screen_result_payment_loc, img_desc=\"筛选结果中的支付方式\")\n    \n            self.wait_ele_visible(loc=Loc.screen_result_success_num_loc, img_desc=\"筛选结果中的收款笔数\")\n            screen_result_success_num = self.get_text(loc=Loc.screen_result_success_num_loc, img_desc=\"筛选结果中的收款笔数\")\n    \n            self.wait_ele_visible(loc=Loc.screen_result_refund_num_loc, img_desc=\"筛选结果中的退款笔数\")\n            screen_result_refund_num = self.get_text(loc=Loc.screen_result_refund_num_loc, img_desc=\"筛选结果中的退款笔数\")\n    \n            self.wait_ele_visible(loc=Loc.screen_result_terminal_loc, img_desc=\"筛选结果中的收银终端\")\n            screen_result_terminal = self.get_text(loc=Loc.screen_result_terminal_loc, img_desc=\"筛选结果中的收银终端\")\n    \n            self.wait_ele_visible(loc=Loc.screen_result_status_loc, img_desc=\"筛选结果中的支付状态\")\n            screen_result_status = self.get_text(loc=Loc.screen_result_status_loc, img_desc=\"筛选结果中的支付状态\")\n    \n            self.wait_ele_visible(loc=Loc.screen_result_success_amount_loc, img_desc=\"筛选结果中的收款金额\")\n            screen_result_success_amount = self.get_text(loc=Loc.screen_result_success_amount_loc, img_desc=\"筛选结果中的收款金额\")\n    \n            self.wait_ele_visible(loc=Loc.screen_result_refund_amount_loc, img_desc=\"筛选结果中的退款金额\")\n            screen_result_refund_amount = self.get_text(loc=Loc.screen_result_refund_amount_loc, img_desc=\"筛选结果中的退款金额\")\n    \n            # 转换支付方式 供APP筛选出的结果 与 测试数据做断言\n            if type_source == \"all\":\n                payment_name = \"全部\"\n            elif type_source == \"weixin\":\n                payment_name = \"微信\"\n            elif type_source == \"alipay\":\n                payment_name = \"支付宝\"\n            elif type_source == \"pos\":\n                payment_name = \"刷卡\"\n            elif type_source == \"auth\":\n                payment_name = \"预授权\"\n            elif type_source == \"other\":\n                payment_name = \"其它\"\n            else:\n                payment_name = \"错误\"\n    \n    # ================================= G E T    A P I    D A T A =================================\n    \n            # 转换支付方式 供接口调用\n            if type_source == \"all\":\n                api_type_source = \"\"\n            else:\n                api_type_source = type_source\n    \n            # 转换支付状态 供断言和接口调用\n            if status == \"all\":\n                status_name = \"全部\"\n                api_status = \"\"\n            elif status == \"success\":\n                status_name = \"交易完成\"\n                api_status = \"1\"\n            else:\n                status_name = \"已退款\"\n                api_status = \"3\"\n    \n            # 调用接口 获取数据 与APP查询的结果比对\n            # 判断全部和部分门店\n            if main_store_name == store_name:\n                api_store_id = \"\"\n                api_store_name = \"全部门店\"\n            else:\n                api_store_id = store_id\n                api_store_name = \"指定门店\"\n    \n            # 判断全部和部分设备\n            if terminal_name:\n                api_terminal_name = \"指定终端\"\n                api_terminal_id = terminal_id\n            else:\n                api_terminal_name = \"全部终端\"\n                api_terminal_id = \"\"\n    \n            self.wait_ele_visible(loc=Loc.screen_back_loc, img_desc=\"筛选结果的返回按钮\")\n            self.click_element(loc=Loc.screen_back_loc, img_desc=\"筛选结果的返回按钮\")\n    \n            self.wait_ele_visible(loc=Loc.order_list_back_loc, img_desc=\"账单列表的返回按钮\")\n            self.click_element(loc=Loc.order_list_back_loc, img_desc=\"账单列表的返回按钮\")\n    \n            # 断言筛选后的起始时间、门店名称、收银终端、支付方式、支付状态 与 测试数据是否一致\n            # 筛选之后需要调接口返回的数据 在测试脚本test_那边断言\n            assert screen_result_start_time == api_time_start\n    \n            assert screen_result_end_time == api_time_end\n    \n>           assert screen_result_store_name == api_store_name\nE           AssertionError\n\npage_ojbects\\orderbook_page.py:729: AssertionError"}, "attachments": [{"name": "log", "source": "a2f893a8-5756-412e-acff-842f395c8c51-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'login_phone': '18971335925', 'login_pwd': '335925', 'main_store_name': '吉野家日式料理店', 'store_name': '吉野家日式料理店', 'store_id': '2019122413571152189', 'time_desc': None, 'time_start': None, 'time_end': None, 'terminal_name': None, 'terminal_id': None, 'type_source': 'all', 'status': 'all'}"}], "start": 1578045527358, "stop": 1578045553644, "uuid": "8c05f040-4099-4fa1-bd22-29d4475d46fc", "historyId": "bac4a5fc2ea306cc5c69292ec7940198", "testCaseId": "3d777f4d2a951069fe1277598e603313", "fullName": "test_cases.test_orderbook.TestOrderBook#test_screen_order", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "screen"}, {"name": "tag", "value": "order"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_orderbook"}, {"name": "subSuite", "value": "TestOrderBook"}, {"name": "host", "value": "AB-201906291255"}, {"name": "thread", "value": "10720-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_orderbook"}]}